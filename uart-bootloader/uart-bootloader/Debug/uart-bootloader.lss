
uart-bootloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  00007a28  00000344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000228  00007800  00007800  0000011c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .application  00000068  00000000  00000000  000000b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000081  00800176  00800176  000003ba  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  000003ba  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000098  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000e38  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007de  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000664  00000000  00000000  00001ada  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c8  00000000  00000000  00002140  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000529  00000000  00000000  00002308  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000069f  00000000  00000000  00002831  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  00002ed0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007800 <__vectors>:
    7800:	0c 94 34 3c 	jmp	0x7868	; 0x7868 <__ctors_end>
    7804:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7808:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    780c:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7810:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7814:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7818:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    781c:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7820:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7824:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7828:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    782c:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7830:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7834:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7838:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    783c:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7840:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7844:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7848:	0c 94 7e 3c 	jmp	0x78fc	; 0x78fc <__vector_18>
    784c:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7850:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7854:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7858:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    785c:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7860:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>
    7864:	0c 94 51 3c 	jmp	0x78a2	; 0x78a2 <__bad_interrupt>

00007868 <__ctors_end>:
    7868:	11 24       	eor	r1, r1
    786a:	1f be       	out	0x3f, r1	; 63
    786c:	cf ef       	ldi	r28, 0xFF	; 255
    786e:	d8 e0       	ldi	r29, 0x08	; 8
    7870:	de bf       	out	0x3e, r29	; 62
    7872:	cd bf       	out	0x3d, r28	; 61

00007874 <__do_copy_data>:
    7874:	11 e0       	ldi	r17, 0x01	; 1
    7876:	a0 e0       	ldi	r26, 0x00	; 0
    7878:	b1 e0       	ldi	r27, 0x01	; 1
    787a:	e8 e2       	ldi	r30, 0x28	; 40
    787c:	fa e7       	ldi	r31, 0x7A	; 122
    787e:	02 c0       	rjmp	.+4      	; 0x7884 <__do_copy_data+0x10>
    7880:	05 90       	lpm	r0, Z+
    7882:	0d 92       	st	X+, r0
    7884:	a6 37       	cpi	r26, 0x76	; 118
    7886:	b1 07       	cpc	r27, r17
    7888:	d9 f7       	brne	.-10     	; 0x7880 <__do_copy_data+0xc>

0000788a <__do_clear_bss>:
    788a:	21 e0       	ldi	r18, 0x01	; 1
    788c:	a6 e7       	ldi	r26, 0x76	; 118
    788e:	b1 e0       	ldi	r27, 0x01	; 1
    7890:	01 c0       	rjmp	.+2      	; 0x7894 <.do_clear_bss_start>

00007892 <.do_clear_bss_loop>:
    7892:	1d 92       	st	X+, r1

00007894 <.do_clear_bss_start>:
    7894:	a7 3f       	cpi	r26, 0xF7	; 247
    7896:	b2 07       	cpc	r27, r18
    7898:	e1 f7       	brne	.-8      	; 0x7892 <.do_clear_bss_loop>
    789a:	0e 94 cc 3c 	call	0x7998	; 0x7998 <main>
    789e:	0c 94 12 3d 	jmp	0x7a24	; 0x7a24 <_exit>

000078a2 <__bad_interrupt>:
    78a2:	0c 94 00 3c 	jmp	0x7800	; 0x7800 <__vectors>

000078a6 <USART_Init>:
		USART_Transmit(dataarr[i++]);
}

void USART_TransmitLine(const char dataarr[]) {
	USART_TransmitString(dataarr);
	USART_NewLine();
    78a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    78aa:	83 e3       	ldi	r24, 0x33	; 51
    78ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    78b0:	e1 ec       	ldi	r30, 0xC1	; 193
    78b2:	f0 e0       	ldi	r31, 0x00	; 0
    78b4:	80 81       	ld	r24, Z
    78b6:	88 61       	ori	r24, 0x18	; 24
    78b8:	80 83       	st	Z, r24
    78ba:	80 81       	ld	r24, Z
    78bc:	80 68       	ori	r24, 0x80	; 128
    78be:	80 83       	st	Z, r24
    78c0:	08 95       	ret

000078c2 <USART_Transmit>:
    78c2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    78c6:	95 ff       	sbrs	r25, 5
    78c8:	fc cf       	rjmp	.-8      	; 0x78c2 <USART_Transmit>
    78ca:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    78ce:	08 95       	ret

000078d0 <USART_TransmitString>:
    78d0:	0f 93       	push	r16
    78d2:	1f 93       	push	r17
    78d4:	cf 93       	push	r28
    78d6:	df 93       	push	r29
    78d8:	8c 01       	movw	r16, r24
    78da:	c0 e0       	ldi	r28, 0x00	; 0
    78dc:	d0 e0       	ldi	r29, 0x00	; 0
    78de:	03 c0       	rjmp	.+6      	; 0x78e6 <USART_TransmitString+0x16>
    78e0:	21 96       	adiw	r28, 0x01	; 1
    78e2:	0e 94 61 3c 	call	0x78c2	; 0x78c2 <USART_Transmit>
    78e6:	f8 01       	movw	r30, r16
    78e8:	ec 0f       	add	r30, r28
    78ea:	fd 1f       	adc	r31, r29
    78ec:	80 81       	ld	r24, Z
    78ee:	81 11       	cpse	r24, r1
    78f0:	f7 cf       	rjmp	.-18     	; 0x78e0 <USART_TransmitString+0x10>
    78f2:	df 91       	pop	r29
    78f4:	cf 91       	pop	r28
    78f6:	1f 91       	pop	r17
    78f8:	0f 91       	pop	r16
    78fa:	08 95       	ret

000078fc <__vector_18>:
}


ISR(USART_RX_vect) {
    78fc:	1f 92       	push	r1
    78fe:	0f 92       	push	r0
    7900:	0f b6       	in	r0, 0x3f	; 63
    7902:	0f 92       	push	r0
    7904:	11 24       	eor	r1, r1
    7906:	2f 93       	push	r18
    7908:	3f 93       	push	r19
    790a:	4f 93       	push	r20
    790c:	5f 93       	push	r21
    790e:	6f 93       	push	r22
    7910:	7f 93       	push	r23
    7912:	8f 93       	push	r24
    7914:	9f 93       	push	r25
    7916:	af 93       	push	r26
    7918:	bf 93       	push	r27
    791a:	ef 93       	push	r30
    791c:	ff 93       	push	r31
	rxBuffer[rxBufferEnd] = UDR0;
    791e:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <__data_end>
    7922:	f0 e0       	ldi	r31, 0x00	; 0
    7924:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    7928:	e9 58       	subi	r30, 0x89	; 137
    792a:	fe 4f       	sbci	r31, 0xFE	; 254
    792c:	80 83       	st	Z, r24
	rxBufferEnd = (rxBufferEnd + 1) % RX_BUFFERSIZE;
    792e:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
    7932:	90 e0       	ldi	r25, 0x00	; 0
    7934:	01 96       	adiw	r24, 0x01	; 1
    7936:	8f 77       	andi	r24, 0x7F	; 127
    7938:	90 78       	andi	r25, 0x80	; 128
    793a:	99 23       	and	r25, r25
    793c:	24 f4       	brge	.+8      	; 0x7946 <__vector_18+0x4a>
    793e:	01 97       	sbiw	r24, 0x01	; 1
    7940:	80 68       	ori	r24, 0x80	; 128
    7942:	9f 6f       	ori	r25, 0xFF	; 255
    7944:	01 96       	adiw	r24, 0x01	; 1
    7946:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <__data_end>
	
	rxBufferFree -= 1;
    794a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <rxBufferFree>
    794e:	81 50       	subi	r24, 0x01	; 1
    7950:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <rxBufferFree>
	if(rxStatus && (rxBufferFree <= RX_FREE_XOFF || rxBufferFree == 0)) {
    7954:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    7958:	88 23       	and	r24, r24
    795a:	69 f0       	breq	.+26     	; 0x7976 <__vector_18+0x7a>
    795c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <rxBufferFree>
    7960:	85 30       	cpi	r24, 0x05	; 5
    7962:	20 f0       	brcs	.+8      	; 0x796c <__vector_18+0x70>
    7964:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <rxBufferFree>
    7968:	81 11       	cpse	r24, r1
    796a:	05 c0       	rjmp	.+10     	; 0x7976 <__vector_18+0x7a>
		USART_Transmit(XOFF);
    796c:	83 e1       	ldi	r24, 0x13	; 19
    796e:	0e 94 61 3c 	call	0x78c2	; 0x78c2 <USART_Transmit>
		rxStatus = 0;
    7972:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
    7976:	ff 91       	pop	r31
    7978:	ef 91       	pop	r30
    797a:	bf 91       	pop	r27
    797c:	af 91       	pop	r26
    797e:	9f 91       	pop	r25
    7980:	8f 91       	pop	r24
    7982:	7f 91       	pop	r23
    7984:	6f 91       	pop	r22
    7986:	5f 91       	pop	r21
    7988:	4f 91       	pop	r20
    798a:	3f 91       	pop	r19
    798c:	2f 91       	pop	r18
    798e:	0f 90       	pop	r0
    7990:	0f be       	out	0x3f, r0	; 63
    7992:	0f 90       	pop	r0
    7994:	1f 90       	pop	r1
    7996:	18 95       	reti

00007998 <main>:
int main() {
	uint8_t counter = 0;
	uint8_t temp;
	
	// select bootloader interrupt vector
	cli();
    7998:	f8 94       	cli
	temp = MCUCR;
    799a:	85 b7       	in	r24, 0x35	; 53
	MCUCR = temp | (1<<IVCE);
    799c:	98 2f       	mov	r25, r24
    799e:	91 60       	ori	r25, 0x01	; 1
    79a0:	95 bf       	out	0x35, r25	; 53
	MCUCR = temp | (1<<IVSEL);
    79a2:	82 60       	ori	r24, 0x02	; 2
    79a4:	85 bf       	out	0x35, r24	; 53
	sei();
    79a6:	78 94       	sei
	
	USART_Init();
    79a8:	0e 94 53 3c 	call	0x78a6	; 0x78a6 <USART_Init>
	
	DDRB |= (1<<DDB5);
    79ac:	84 b1       	in	r24, 0x04	; 4
    79ae:	80 62       	ori	r24, 0x20	; 32
    79b0:	84 b9       	out	0x04, r24	; 4
	DDRB &= (1<<DDB0);
    79b2:	84 b1       	in	r24, 0x04	; 4
    79b4:	81 70       	andi	r24, 0x01	; 1
    79b6:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB0); // enable pullup
    79b8:	85 b1       	in	r24, 0x05	; 5
    79ba:	81 60       	ori	r24, 0x01	; 1
    79bc:	85 b9       	out	0x05, r24	; 5
	
	USART_TransmitString("\r\n-----------------------------------------------\r\n");
    79be:	8c e1       	ldi	r24, 0x1C	; 28
    79c0:	91 e0       	ldi	r25, 0x01	; 1
    79c2:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <USART_TransmitString>
	USART_TransmitString("Hello");
    79c6:	80 e5       	ldi	r24, 0x50	; 80
    79c8:	91 e0       	ldi	r25, 0x01	; 1
    79ca:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <USART_TransmitString>
	
	if(PINB & (1<<PINB0)) {
    79ce:	18 9b       	sbis	0x03, 0	; 3
    79d0:	19 c0       	rjmp	.+50     	; 0x7a04 <main+0x6c>
		USART_TransmitString(" and goodbye from bootloader!\r\n");
    79d2:	86 e5       	ldi	r24, 0x56	; 86
    79d4:	91 e0       	ldi	r25, 0x01	; 1
    79d6:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <USART_TransmitString>
    79da:	1b c0       	rjmp	.+54     	; 0x7a12 <main+0x7a>
	} else {
		while (counter < 3*2)
		{
			counter++;
    79dc:	8f 5f       	subi	r24, 0xFF	; 255
			if(PORTB & (1<<PORTB5))
    79de:	2d 9b       	sbis	0x05, 5	; 5
    79e0:	04 c0       	rjmp	.+8      	; 0x79ea <main+0x52>
			PORTB = PORTB & (~(1<<PORTB5));
    79e2:	95 b1       	in	r25, 0x05	; 5
    79e4:	9f 7d       	andi	r25, 0xDF	; 223
    79e6:	95 b9       	out	0x05, r25	; 5
    79e8:	03 c0       	rjmp	.+6      	; 0x79f0 <main+0x58>
			else
			PORTB = PORTB | (1<<PORTB5);
    79ea:	95 b1       	in	r25, 0x05	; 5
    79ec:	90 62       	ori	r25, 0x20	; 32
    79ee:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    79f0:	2f ef       	ldi	r18, 0xFF	; 255
    79f2:	33 ed       	ldi	r19, 0xD3	; 211
    79f4:	90 e3       	ldi	r25, 0x30	; 48
    79f6:	21 50       	subi	r18, 0x01	; 1
    79f8:	30 40       	sbci	r19, 0x00	; 0
    79fa:	90 40       	sbci	r25, 0x00	; 0
    79fc:	e1 f7       	brne	.-8      	; 0x79f6 <main+0x5e>
    79fe:	00 c0       	rjmp	.+0      	; 0x7a00 <main+0x68>
    7a00:	00 00       	nop
    7a02:	01 c0       	rjmp	.+2      	; 0x7a06 <main+0x6e>
    7a04:	80 e0       	ldi	r24, 0x00	; 0
	USART_TransmitString("Hello");
	
	if(PINB & (1<<PINB0)) {
		USART_TransmitString(" and goodbye from bootloader!\r\n");
	} else {
		while (counter < 3*2)
    7a06:	86 30       	cpi	r24, 0x06	; 6
    7a08:	48 f3       	brcs	.-46     	; 0x79dc <main+0x44>
			else
			PORTB = PORTB | (1<<PORTB5);
			_delay_ms(1000);
		}
		
		USART_TransmitString("from bootloader!\r\n");
    7a0a:	83 e6       	ldi	r24, 0x63	; 99
    7a0c:	91 e0       	ldi	r25, 0x01	; 1
    7a0e:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <USART_TransmitString>
	}
	
	
	
	// select application interrupt vector
	cli();
    7a12:	f8 94       	cli
	temp = MCUCR;
    7a14:	85 b7       	in	r24, 0x35	; 53
	MCUCR = temp | (1<<IVCE);
    7a16:	98 2f       	mov	r25, r24
    7a18:	91 60       	ori	r25, 0x01	; 1
    7a1a:	95 bf       	out	0x35, r25	; 53
	MCUCR = temp & ~(1<<IVSEL);
    7a1c:	8d 7f       	andi	r24, 0xFD	; 253
    7a1e:	85 bf       	out	0x35, r24	; 53
	
	// TODO: reset all peripherals to default settings
	application();
    7a20:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>

00007a24 <_exit>:
    7a24:	f8 94       	cli

00007a26 <__stop_program>:
    7a26:	ff cf       	rjmp	.-2      	; 0x7a26 <__stop_program>

Disassembly of section .application:

00000000 <application>:
		USART_Transmit(dataarr[i++]);
}

void USART_TransmitLine(const char dataarr[]) {
	USART_TransmitString(dataarr);
	USART_NewLine();
   0:	84 b1       	in	r24, 0x04	; 4
   2:	80 62       	ori	r24, 0x20	; 32
   4:	84 b9       	out	0x04, r24	; 4
   6:	8a b1       	in	r24, 0x0a	; 10
   8:	80 6e       	ori	r24, 0xE0	; 224
   a:	8a b9       	out	0x0a, r24	; 10
   c:	8b b1       	in	r24, 0x0b	; 11
   e:	8f 71       	andi	r24, 0x1F	; 31
  10:	8b b9       	out	0x0b, r24	; 11
  12:	82 e0       	ldi	r24, 0x02	; 2
  14:	91 e0       	ldi	r25, 0x01	; 1
  16:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <USART_TransmitString>
  1a:	30 e0       	ldi	r19, 0x00	; 0
  1c:	2d 9b       	sbis	0x05, 5	; 5
  1e:	0e c0       	rjmp	.+28     	; 0x3c <__FUSE_REGION_LENGTH__+0x39>
  20:	85 b1       	in	r24, 0x05	; 5
  22:	8f 7d       	andi	r24, 0xDF	; 223
  24:	85 b9       	out	0x05, r24	; 5
  26:	3f 5f       	subi	r19, 0xFF	; 255
  28:	2f ef       	ldi	r18, 0xFF	; 255
  2a:	43 ed       	ldi	r20, 0xD3	; 211
  2c:	80 e3       	ldi	r24, 0x30	; 48
  2e:	21 50       	subi	r18, 0x01	; 1
  30:	40 40       	sbci	r20, 0x00	; 0
  32:	80 40       	sbci	r24, 0x00	; 0
  34:	e1 f7       	brne	.-8      	; 0x2e <__FUSE_REGION_LENGTH__+0x2b>
  36:	00 c0       	rjmp	.+0      	; 0x38 <__FUSE_REGION_LENGTH__+0x35>
  38:	00 00       	nop
  3a:	0c c0       	rjmp	.+24     	; 0x54 <__SREG__+0x15>
  3c:	85 b1       	in	r24, 0x05	; 5
  3e:	80 62       	ori	r24, 0x20	; 32
  40:	85 b9       	out	0x05, r24	; 5
  42:	9f ef       	ldi	r25, 0xFF	; 255
  44:	23 ec       	ldi	r18, 0xC3	; 195
  46:	49 e0       	ldi	r20, 0x09	; 9
  48:	91 50       	subi	r25, 0x01	; 1
  4a:	20 40       	sbci	r18, 0x00	; 0
  4c:	40 40       	sbci	r20, 0x00	; 0
  4e:	e1 f7       	brne	.-8      	; 0x48 <__SREG__+0x9>
  50:	00 c0       	rjmp	.+0      	; 0x52 <__SREG__+0x13>
  52:	00 00       	nop
  54:	8b b1       	in	r24, 0x0b	; 11
  56:	28 2f       	mov	r18, r24
  58:	2f 71       	andi	r18, 0x1F	; 31
  5a:	40 e2       	ldi	r20, 0x20	; 32
  5c:	34 9f       	mul	r19, r20
  5e:	c0 01       	movw	r24, r0
  60:	11 24       	eor	r1, r1
  62:	82 2b       	or	r24, r18
  64:	8b b9       	out	0x0b, r24	; 11
  66:	da cf       	rjmp	.-76     	; 0x1c <__FUSE_REGION_LENGTH__+0x19>
